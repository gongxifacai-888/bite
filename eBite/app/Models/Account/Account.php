<?php


namespace App\Models\Account;

use App\Models\Currency\Currency;
use App\Models\Model;
use App\Models\User\User;
use App\Exceptions\ThrowException;

abstract class Account extends Model
{

    public function __get($key)
    {
        return parent::__get($key); // TODO: Change the autogenerated stub
    }

    /**
     * @var AccountLog
     */
    public $logClass = null;

    protected $appends = [

    ];

    /***********************************************获取器区**************************************************/

    public function getCurrencyCodeAttribute()
    {
        return $this->currency->code ?? __('model.未知');
    }

    public function getUidAttribute()
    {
        return $this->user->uid ?? __('model.未知');
    }

    public function getSumBalanceAttribute()
    {
        return bc($this->balance, '+', $this->lock_balance);
    }

    public function getConvertCnyAttribute()
    {
        $cny_price = $this->currency->cny_price;
        return bc($this->sum_balance, '*', $cny_price);
    }

    public function getConvertUsdAttribute()
    {
        $usd_price = $this->currency->usd_price;
        return bc($this->sum_balance, '*', $usd_price);
    }

    public function getAccountTypeAttribute()
    {
        return AccountType::where('classname', static::class)->first();
    }

    /***********************************************关联区**************************************************/

    public function currency()
    {
        return $this->belongsTo(Currency::class)->with('currencyProtocols');
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function accountType()
    {
        return $this->belongsTo(AccountType::class);
    }

    /*******************************************自定义方法区**************************************************/

    /**
     * 改变账户余额
     *
     * @param       $log_type
     * @param       $number
     * @param array $extra_data
     *
     * @throws \Exception
     */
    public function changeBalance($log_type, $number, $extra_data = [])
    {
        if ($number == 0) {
            return;
        }
        if ($number < 0 && $this->balance < abs($number)) {
            // throw new ThrowException(__('model.用户余额不足,请检查余额'));
            throw new ThrowException(__('The user\'s balance is insufficient. Please check the balance'));
        }

        $before = $this->balance;
        $this->balance = bc($this->balance, '+', $number);
        $after = $this->balance;

        $this->save();

        $this->logClass::insertLog($this->user_id, $this->currency_id, $log_type, $before, $number, $after,
            $extra_data);
    }

    /**改变账户锁定余额
     *
     * @param       $log_type
     * @param       $number
     * @param array $extra_data
     *
     * @throws \Exception
     */
    public function changeLockBalance($log_type, $number, $extra_data = [])
    {
        if ($number == 0) {
            return;
        }
        if ($number < 0 && $this->lock_balance < abs($number)) {
            throw new ThrowException(__('model.锁定余额不足'));
        }

        $before = $this->lock_balance;
        $this->lock_balance = bc($this->lock_balance, '+', $number);
        $after = $this->lock_balance;

        $this->save();

        $this->logClass::insertLog($this->user_id, $this->currency_id, $log_type, $before, $number, $after,
            $extra_data, AccountLog::IS_LOCK);
    }

    /**获取用户的一个账户并且上锁
     *
     * @param int $currency_id
     * @param int $user_id
     *
     * @return static|\Illuminate\Database\Eloquent\Model
     */
    public static function getAccountForLock($currency_id, $user_id = -1)
    {
        if ($user_id === -1) {
            $user_id = User::getUserId();
        }
        return self::lockForUpdate()->where('user_id', $user_id)
            ->where('currency_id', $currency_id)
            ->first();
    }

    /**获取用户的一个账户
     *
     * @param int $currency_id
     * @param int $user_id
     *
     * @return static|\Illuminate\Database\Eloquent\Model
     */
    public static function getBalance($currency_id, $user_id = -1)
    {
        if ($user_id === -1) {
            $user_id = User::getUserId();
        }
        return self::where('user_id', $user_id)
            ->where('currency_id', $currency_id)
            ->value('balance');
    }

    /**获取用户的一个账户
     *
     * @param int $currency_id
     * @param int $user_id
     *
     * @return static|\Illuminate\Database\Eloquent\Model
     */
    public static function getLockBalance($currency_id, $user_id = -1)
    {
        if ($user_id === -1) {
            $user_id = User::getUserId();
        }
        return self::where('user_id', $user_id)
            ->where('currency_id', $currency_id)
            ->value('lock_balance');
    }

    /**
     * 获取账户
     *
     * @param      $account_type_id
     * @param      $currency_id
     * @param null $user_id
     *
     * @return Account|ChangeAccount|LegalAccount|LeverAccount|\Illuminate\Database\Eloquent\Model
     * @throws \Exception
     */
    public static function getAccountByType($account_type_id, $currency_id, $user_id = null)
    {
        $user_id = $user_id ?? User::getUserId();

        $class = AccountType::getAccountClass($account_type_id);
        $account = $class::getAccountForLock($currency_id, $user_id);
        if (!$account) {
            throw new ThrowException(__('model.未找到账户'), 404);
        }
        return $account;
    }
}
